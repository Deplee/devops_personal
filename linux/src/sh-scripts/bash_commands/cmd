#!/bin/bash

# Set options:

# Fail on a single failed command in a pipeline
set -o pipefail

# Save global script args
ARGS="$@"

# Fail on error and undefined vars (please don't use global vars, but
# evaluation of functions for return values)
set -eu

# Main loop evaluating sub commands
run() {
    local first_arg=${1:-}
    local cmd_dir="$(basedir)/commands"
    local command
    if [ -n "$first_arg" ] && [[ ${first_arg} != -* ]]; then
      command="$first_arg"
      if [ ! -f "$cmd_dir/$command" ]; then
        echo
        echo ">>>> Unknown command '$command'"
        echo
        display_help
        exit 1
      fi
    else
      command="help"
      echo "No command given"
      echo
    fi

    if [ "${command}" = "help" ] || $(hasflag --help -h); then
        display_help ${command:-}
        exit 0
    fi

    source "$cmd_dir/$command"
    # command::run if instruction RUN in file exists; in another ways need $2 or $3 etc.
    # with opts $2 & etc.. only.
    #eval "${command}::run"
    eval "${command}::$2"
}

display_help() {
  local command=${1:-}
  local cmd_dir="$(basedir)/commands"

  if [ -z "${command}" ] || [ "$command" = "help" ]; then
    cat << EOT
Usage: cmd <subcommand> <opts>

cmd helper

Commands:
EOT
    for cmd in $(ls $cmd_dir); do
      if [ -f $cmd_dir/$cmd ]; then
        source $cmd_dir/$cmd
        printf "   %-15s  %s\n" $cmd "$($cmd::description)"
      fi
    done
    printf "   %-15s  %s\n" "help" "Print this help message"
  else
    source $cmd_dir/$command
    cat <<EOT
$($command::description)

Usage: cmd $command [... options ...]

EOT
    echo "Options for $command:"
    echo -e "$($command::usage)"
  fi

  cat <<EOT

Global Options:

  -h --help                 Print this help message
EOT
}

# Directory where this script is located
basedir() {
    # Default is current directory
    local script=${BASH_SOURCE[0]}

    # Resolve symbolic links
    if [ -L $script ]; then
        if readlink -f $script >/dev/null 2>&1; then
            script=$(readlink -f $script)
        elif readlink $script >/dev/null 2>&1; then
            script=$(readlink $script)
        elif realpath $script >/dev/null 2>&1; then
            script=$(realpath $script)
        else
            echo "ERROR: Cannot resolve symbolic link $script"
            exit 1
        fi
    fi

    local dir=$(dirname "$script")
    local full_dir=$(cd "${dir}" && pwd)
    echo ${full_dir}
}

# ===========================================================
# Startup ...

# Read in some helpers
source $(basedir)/helpers.sh

if $(hasflag --verbose -v); then
    export PS4='+($(basename ${BASH_SOURCE[0]}):${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -x
fi

run $ARGS